一、内建命令的使用：
1. bg
命令作用： 将最近一个挂起的进程转为后台执行。
使用示例： bg
参数个数： 无参数

2. cd
命令作用： 无参数跳转到HOME目录，有参数则改变当前目录为参数内容
使用示例： cd
参数个数： 无参数或1个参数

3. clr
命令作用： 清空当前屏幕内容
使用示例： clr
参数个数： 无参数

4. dir
命令作用： 无参数则显示当前目录下的内容，有参数则显示参数所指目录下的内容
使用示例： dir
使用示例： dir /
参数个数： 无参数或1个参数

5. echo
命令作用： 无参数则显示空内容，有参数则显示参数内容
使用示例： echo
使用示例： echo 1 22 oop
参数个数： 无参数或任意多参数

6. exec
命令作用： 使用参数代表的命令替换当前进程
使用示例： exec ls
参数个数： 1个参数

7. exit
命令作用： 退出Shell
使用示例： exit
参数个数： 无参数

8. fg
命令作用： 将最近的一个后台任务转到前台执行
使用示例： fg
参数个数： 无参数

9. help
命令作用： 显示用户手册
使用示例： help
参数个数： 无参数

10. jobs
命令作用： 显示所有的后台进程
使用示例： jobs
参数个数： 无参数

11. pwd
命令作用： 显示当前路径
使用示例： pwd
参数个数： 无参数

12. set
命令作用： 无参数时，显示所有环境变量；有2个参数时，设置第1个参数代表的环境变量的值为第2个参数
使用示例： set
使用示例： set USER Wang
参数个数： 无参数或2个参数

13. shift
命令作用： 从标准输入读入参数(以空格分隔)，左移后输出，左移的位数由shift命令后跟的参数决定，无参数则默认左移一位，有1个参数则左移参数代表的位数
使用示例： shift
使用示例： shift 2
参数个数： 无参数或1个参数

14. test

命令作用： 可以进行一些字符串、数字的比较，包括两字符串是否相等，两数字之间的大小关系是否成立(相等，不相等，大于，小于，大于等于，小于等于)
使用示例： test abc = abc
使用示例： test abc != abc
使用示例： test 2 -eq 2
使用示例： test 2 -ne 2
使用示例： test 2 -gt 2
使用示例： test 2 -ge 2
使用示例： test 2 -lt 2
使用示例： test 2 -le 2
参数个数： 3个参数

15. time
命令作用： 显示当前时间
使用示例： time
参数个数： 无参数

16. umask
命令作用： 无参数时，显示当前掩码；有1个参数时，将当前掩码修改为参数的值
使用示例： umask
使用示例： umask 0222
参数个数： 无参数或1个参数

17. unset
命令作用： 将参数所指的环境变量的值取消
使用示例： unset USER
参数个数： 1个参数

18. cat
命令作用： 打印文件到标准输出
使用示例： cat test.txt
参数个数： 1个参数或多个参数

19. sleep
命令作用： 休眠指定秒数量
使用示例： sleep 20
参数个数： 1个参数

二、外部命令的执行：
简单描述： 除了内建命令之外，myshell还能够自动查找并执行外部命令
实现原理： 其他的命令行输入被解释为程序调用，myshell通过fork()创建子进程，然后在子进程中调用execvp()函数来查找并执行这个程序，如果没有找到则会输出相应的错误提示信息
使用示例： ls -l
使用示例： gedit test.txt

三、脚本文件的执行：
简单描述： MyShell能够从脚本文件中提取命令行输入，在调用myshell时，如果不加参数则进入命令行输入模式，如果加上一个脚本文件的参数，则会从参数代表的文件中提取命令并执行
使用示例： ./MyShell test.sh

四、I/O重定向：
一般来说，我们用键盘输入作为标准输入，屏幕输出作为标准输出，但在有些时候我们希望命令输入能从其他文件读取，输出到文件而不是直接输出到屏幕中以方便进一步的操作，这时我们可以使用重定向来完成这一目的
例如命令行为：programname arg1 arg2 < inputfile > outputfile
使用arg1 和arg2 执行程序programname，输入文件流被替换为inputfile，输出文件流被替换为outputfile
使用输出重定向时，如果重定向字符是>，则创建输出文件，如果存在则覆盖之；如果重定向字符为>>，也会创建输出文件，如果存在则添加到文件尾。

五、后台程序执行：
简单描述： myshell能够支持后台程序执行，在输入命令后空格并输入字符‘&’，即可使得该条命令在后台执行而不阻塞主进程
使用示例： sleep 5 &

六、管道操作：
简单描述： myshell能够支持管道操作，在符号‘|’左边命令的输出将成为右边命令的输入
使用示例： help | more
